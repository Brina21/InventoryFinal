@using InventoryFinal.DTO
@model CompraConDetallesDTO
@{
    ViewBag.Title = "Editar Compra";
    var productos = ViewBag.Productos as List<Producto>;
    var clientes = ViewBag.Clientes as List<Cliente> ?? new List<Cliente>();
}

<h2>Editar Compra</h2>

<form asp-action="Editar" method="post">
    <input type="hidden" asp-for="Id" />

    <div>
        <label>Usuario</label>
        <input type="text" value="@Model.NombreUsuario" readonly class="form-control" />
    </div>

    <div>
        <label>Fecha</label>
        <input type="text" value="@Model.FechaCompra.ToString("yyyy-MM-dd HH:mm")" readonly class="form-control" />
    </div>

    <div>
        <label>Cliente</label>
        <select asp-for="NombreCliente" class="form-control">
            <option value="">-- Sin Cliente --</option>
            @foreach (var cliente in clientes)
            {
                <option value="@cliente.Nombre" selected="@(cliente.Nombre == Model.NombreCliente)">
                    @cliente.Nombre
                </option>
            }
        </select>
    </div>

    <hr />
    <div id="detalles-container"></div>
    <button type="button" class="btn btn-primary" onclick="agregarProducto()">Agregar producto</button>

    <hr />
    <div>
        <label>Total:</label>
        <input type="text" id="totalCompra" name="TotalCompra" readonly class="form-control" value="@Model.Total" />
    </div>

    <button type="submit" class="btn btn-warning">Guardar Cambios</button>
    <a asp-action="Index" class="btn btn-secondary">Cancelar</a>
</form>

@section Scripts {
    <script>
        const productos = @Html.Raw(Json.Serialize(productos));
        let index = 0;

        function agregarProducto(nombre = "", cantidad = 1, precio = 0) {
            const container = document.getElementById("detalles-container");

            const div = document.createElement("div");
            div.classList.add("mb-3");
            div.innerHTML = `
                <div class="row">
                    <div class="col-md-4">
                        <label>Producto</label>
                        <select name="DetalleCompras[${index}].NombreProducto" class="form-control" onchange="actualizarPrecio(${index})">
                            ${productos.map(p => `<option value="${p.Nombre}" ${p.Nombre === nombre ? 'selected' : ''}>${p.Nombre}</option>`).join("")}
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label>Cantidad</label>
                        <input name="DetalleCompras[${index}].Unidades" type="number" class="form-control" value="${cantidad}" min="1" onchange="calcularSubtotal(${index})"/>
                    </div>
                    <div class="col-md-2">
                        <label>Precio</label>
                        <input name="DetalleCompras[${index}].PrecioUnitario" type="number" step="0.01" class="form-control" value="${precio}" onchange="calcularSubtotal(${index})"/>
                    </div>
                    <div class="col-md-2">
                        <label>Subtotal</label>
                        <input type="text" id="subtotal-${index}" readonly class="form-control"/>
                    </div>
                </div>
            `;
            container.appendChild(div);
            actualizarPrecio(index);
            index++;
        }

        function actualizarPrecio(i) {
            const productoSelect = document.querySelector(`[name='DetalleCompras[${i}].NombreProducto']`);
            const precioInput = document.querySelector(`[name='DetalleCompras[${i}].PrecioUnitario']`);
            const producto = productos.find(p => p.Nombre === productoSelect.value);
            if (producto) {
                precioInput.value = producto.Precio;
                calcularSubtotal(i);
            }
        }

        function calcularSubtotal(i) {
            const unidades = parseFloat(document.querySelector(`[name='DetalleCompras[${i}].Unidades']`).value) || 0;
            const precio = parseFloat(document.querySelector(`[name='DetalleCompras[${i}].PrecioUnitario']`).value) || 0;
            const subtotal = unidades * precio;
            document.getElementById(`subtotal-${i}`).value = subtotal.toFixed(2);
            calcularTotal();
        }

        function calcularTotal() {
            let total = 0;
            for (let j = 0; j < index; j++) {
                const subtotal = parseFloat(document.getElementById(`subtotal-${j}`)?.value) || 0;
                total += subtotal;
            }
            document.getElementById("totalCompra").value = total.toFixed(2);
        }

        @if (Model.DetalleCompras != null && Model.DetalleCompras.Any())
        {
            foreach (var d in Model.DetalleCompras)
            {
                <text>
                            agregarProducto("@d.NombreProducto", @d.Unidades, @d.PrecioUnitario);
                </text>
            }
        }
    </script>
}
